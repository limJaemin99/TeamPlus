<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.teamplus.mvc.dao.UsersMapper">

    <!-- 유저 번호 시퀀스 -->
    <select id="getSequence" resultType="int">
        select
            userNo_seq.nextval
        from dual
    </select>

    <!-- 유저 [아이디 중복확인] : ID가 이미 존재하면 1 반환/ 아니면 0 반환 -->
    <select id="isIdExist" resultType="int">
        select count(*)
        from Users
        where
            Id=#{id}
    </select>

    <!-- 유저 [이메일 중복확인] : email가 이미 존재하면 1 반환/ 아니면 0 반환 -->
    <select id="isEmailExist" resultType="int" parameterType="String">
        select count(*)
        from Users
        where
            Email=#{email}
    </select>

    <!-- 유저 [닉네임 중복확인] : nickName가 이미 존재하면 1 반환/ 아니면 0 반환 -->
    <select id="isNickNameExist" resultType="int">
        select count(*)
        from Users
        where
             NickName=#{nickName}
    </select>

    <!-- 유저 [회원가입] -->
    <insert id="signUp">
        insert
        into Users(userno,id,password,name,email,nickname,job)
        values(userno_seq.nextval,#{id},#{password},#{name},#{email},#{nickName},#{job})
    </insert>


    <!-- 유저 [회원정보 수정(닉네임)] -->
    <update id="changeNickName">
        update Users
        set
            NickName=#{nickname}
        where
            UserNo=#{userNO}
    </update>

    <!-- 유저 [회원정보 수정(직업)] -->
    <update id="changeJob">
        update Users
        set
            job=#{job}
        where
            UserNo=#{userNO}
    </update>

    <!-- 유저 [회원정보 수정(자기소개)] -->
    <update id="changeDescription">
        update Users
        set
            description=#{description}
        where
            UserNo=#{userNO}
    </update>

    <!-- 유저 [회원정보 수정(프로필 사진)] -->
    <update id="changeProfile">
        update Users
        set
            profileURL=#{profileURL}
        where
            UserNo=#{userNO}
    </update>

    <!-- 유저 [기존 회원정보 수정(전체 수정)] -->
    <update id="updateProfile">
        update Users
        set
            profileURL = #{profileURL},
            name = #{name},
            email = #{email},
            nickName = #{nickName},
            job = #{job},
            description = #{description}
        where UserNo = #{userNo}
    </update>

    <!-- 유저 [회원 탈퇴] -->
    <delete id="delete">
        delete from Users
        where
            UserNo=#{userNo}
    </delete>

    <!-- 유저 [전체회원 출력] -->
    <select id="selectList">
        select * from Users
    </select>

    <!-- 유저 [사용자번호별 출력] -->
    <select id="selectOne" resultType="UsersDTO">
        select * from Users
        where
            UserNO=#{userNO}
    </select>

    <!-- 유저 [name과 email로 id 찾기] -->
    <select id="findId" resultType="UsersDTO">
        select *
        from Users
        where
            Name=#{name} AND Email=#{email}
    </select>

    <!-- 유저 [비밀번호 재설정] : id랑 email 입력해서 일치하는 유저 비밀번호 변경 -->
    <!-- 로그인 상태 X -->
    <update id="changePassword">
        update Users
        set Password=#{password}
        where
            Id=#{id} AND Email=#{email}
    </update>

    <select id="signin" resultType="UsersDTO" parameterType="UsersDTO">
        select *
        from
            Users
        where
            id=#{id} AND password=#{password}
    </select>

    <!-- [비밀번호 재설정용] email 로 정보 가져오기 -->
    <select id="selectByEmail" parameterType="String" resultType="UsersDTO">
        SELECT *
        FROM users
        WHERE email=#{email}
    </select>

    <!-- [닉네임] 으로 유저 검색 -->
    <select id="selectByNickName" parameterType="String" resultType="UsersDTO">
        SELECT *
        FROM users
        WHERE nickName=#{nickName}
    </select>

    <!-- 유저 번호로 [프로필사진] 가져오기 -->
    <select id="getProfileURL" parameterType="String" resultType="String">
        SELECT profileURL
        FROM users
        WHERE userNo=#{userNo}
    </select>

    <select id="snslogin" parameterType="java.util.HashMap" resultType="UsersDTO">
        select * from Users where  email=#{email}
    </select>

    <insert id="snsinsert" parameterType="java.util.HashMap">
        insert into Users(userno,name,email)
        values(USERNO_seq.nextval,#{name},#{email})

    </insert>

    <update id="snsUpdate" parameterType="UsersDTO">
        update users
        set
            id = #{id},
            password = #{password},
            name = #{name},
            nickname = #{nickName},
            job = #{job}
        where
            email = #{email}
    </update>

    <!-- 로그인 상태 O-->
    <update id="loginChangePassword">
        update Users
        set Password=#{password}
        where
            Id=#{id}
    </update>

</mapper>